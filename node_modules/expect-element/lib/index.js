'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveAttribute = toHaveAttribute;
exports.toNotHaveAttribute = toNotHaveAttribute;
exports.toHaveAttributes = toHaveAttributes;
exports.toNotHaveAttributes = toNotHaveAttributes;
exports.toHaveText = toHaveText;
exports.toNotHaveText = toNotHaveText;

var _expect = require('expect');

var _TestUtils = require('./TestUtils');

function toHaveAttribute(name, value, message) {
  (0, _expect.assert)((0, _TestUtils.isDOMNode)(this.actual), 'The "actual" argument in expect(actual).toHaveAttribute() must be a DOM node, %s was given', this.actual);

  if (value == null) {
    (0, _expect.assert)(this.actual.getAttribute(name), message || 'Expected %s to have a %s attribute, but it did not', this.actual, name);
  } else {
    (0, _expect.assert)(this.actual.getAttribute(name) === value, message || 'Expected %s to have a %s attribute of %s, but it was %s', this.actual, name, value, this.actual.getAttribute(name));
  }
}

function toNotHaveAttribute(name, value, message) {
  (0, _expect.assert)((0, _TestUtils.isDOMNode)(this.actual), 'The "actual" argument in expect(actual).toNotHaveAttribute() must be a DOM node, %s was given', this.actual);

  if (value == null) {
    (0, _expect.assert)(this.actual.getAttribute(name) == null, message || 'Expected %s to not have a %s attribute, but it did', this.actual, name);
  } else {
    (0, _expect.assert)(this.actual.getAttribute(name) !== value, message || 'Expected %s to not have a %s attribute of %s', this.actual, name, value);
  }
}

function toHaveAttributes(attributes, message) {
  (0, _expect.assert)((0, _TestUtils.isDOMNode)(this.actual), 'The "actual" argument in expect(actual).toHaveAttributes() must be a DOM node, %s was given', this.actual);

  for (var property in attributes) {
    if (attributes.hasOwnProperty(property)) toHaveAttribute.call(this, property, attributes[property], message);
  }
}

function toNotHaveAttributes(attributes, message) {
  (0, _expect.assert)((0, _TestUtils.isDOMNode)(this.actual), 'The "actual" argument in expect(actual).toNotHaveAttributes() must be a DOM node, %s was given', this.actual);

  for (var property in attributes) {
    if (attributes.hasOwnProperty(property)) toNotHaveAttribute.call(this, property, attributes[property], message);
  }
}

function toHaveText(text, message) {
  (0, _expect.assert)((0, _TestUtils.isDOMNode)(this.actual), 'The "actual" argument in expect(actual).toHaveText() must be a DOM node, %s was given', this.actual);

  (0, _expect.assert)(this.actual.textContent === text, message || 'Expected %s to have %s text, but had %s instead', this.actual, text, this.actual.textContent);
}

function toNotHaveText(text, message) {
  (0, _expect.assert)((0, _TestUtils.isDOMNode)(this.actual), 'The "actual" argument in expect(actual).toHaveText() must be a DOM node, %s was given', this.actual);

  (0, _expect.assert)(this.actual.textContent !== text, message || 'Expected %s to not have %s text', this.actual, text);
}

exports.default = {
  toHaveAttribute: toHaveAttribute,
  toHaveAttributes: toHaveAttributes,
  toNotHaveAttribute: toNotHaveAttribute,
  toNotHaveAttributes: toNotHaveAttributes,
  toHaveText: toHaveText,
  toNotHaveText: toNotHaveText
};